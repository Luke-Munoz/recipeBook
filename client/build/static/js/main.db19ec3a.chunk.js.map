{"version":3,"sources":["components/pages/ViewBlogPage.js","components/nav/index.js","components/pages/OnLoadPage.js","components/pages/Login.js","components/pages/Signup.js","App.js","reportWebVitals.js","index.js"],"names":["Recipes","props","CardDeck","Card","CardImg","top","width","src","alt","CardBody","CardTitle","tag","CardSubtitle","className","CardText","Button","Navigation","map","tab","href","toLowerCase","onClick","handlePageChange","currentPage","OnLoadPage","Jumbotron","fluid","Container","Login","onSubmit","htmlFor","placeholder","name","type","id","Signup","useState","email","password","e","a","preventDefault","create_username","document","querySelector","value","create_password","create_user_email","console","log","fetch","method","body","JSON","stringify","username","headers","response","json","serverResponse","message","Error","App","renderPage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.db19ec3a.chunk.js","sourcesContent":["import React from 'react';\nimport {\n    Card, Button, CardImg, CardTitle, CardText, CardDeck,\n    CardSubtitle, CardBody\n} from 'reactstrap';\n\n// import { Nav, NavItem, NavLink, Button, ButtonGroup, Container, Row, Col, Media } from 'reactstrap';\nfunction Recipes(props){\n\n\n    return (\n        <CardDeck>\n            <Card>\n                <CardImg top width=\"100%\" src=\"/assets/256x186.svg\" alt=\"Card image cap\" />\n                <CardBody>\n                    <CardTitle tag=\"h5\">Card title</CardTitle>\n                    <CardSubtitle tag=\"h6\" className=\"mb-2 text-muted\">Card subtitle</CardSubtitle>\n                    <CardText>This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</CardText>\n                    <Button>Button</Button>\n                </CardBody>\n            </Card>\n            <Card>\n                <CardImg top width=\"100%\" src=\"/assets/256x186.svg\" alt=\"Card image cap\" />\n                <CardBody>\n                    <CardTitle tag=\"h5\">Card title</CardTitle>\n                    <CardSubtitle tag=\"h6\" className=\"mb-2 text-muted\">Card subtitle</CardSubtitle>\n                    <CardText>This card has supporting text below as a natural lead-in to additional content.</CardText>\n                    <Button>Button</Button>\n                </CardBody>\n            </Card>\n            <Card>\n                <CardImg top width=\"100%\" src=\"/assets/256x186.svg\" alt=\"Card image cap\" />\n                <CardBody>\n                    <CardTitle tag=\"h5\">Card title</CardTitle>\n                    <CardSubtitle tag=\"h6\" className=\"mb-2 text-muted\">Card subtitle</CardSubtitle>\n                    <CardText>This is a wider card with supporting text below as a natural lead-in to additional content. This card has even longer content than the first to show that equal height action.</CardText>\n                    <Button>Button</Button>\n                </CardBody>\n            </Card>\n        </CardDeck>\n    );\n};\n\nexport default Recipes","import React from 'react';\n// import { Nav, NavItem, NavLink, Container, Row, Col } from 'reactstrap';\n\n\n\nconst Navigation = (props) => {\n\n\n\n\n    const tabs = ['Recipes', 'Login','Signup']\n\n\n    return (\n    <ul className=\"nav nav-tabs\">\n        {tabs.map(tab => (\n            <li className=\"nav-item\" key={tab}>\n                <a\n                    href={'#' + tab.toLowerCase()}\n                    // Whenever a tab is clicked on,\n                    // the current page is set through the handlePageChange props.\n                    onClick={() => props.handlePageChange(tab)}\n                    className={\n                        props.currentPage === tab ? 'nav-link active' : 'nav-link'\n                    }>\n                    {tab}\n                </a>\n            </li>\n        ))}\n    </ul>\n    );\n}\n\nexport default Navigation;","\nimport React from 'react';\nimport { Jumbotron, Container } from 'reactstrap';\n\nconst OnLoadPage = (props) => {\n    return (\n        <div>\n            <Jumbotron fluid>\n                <Container fluid>\n                    <h1 className=\"display-3\">Fluid jumbotron</h1>\n                    <p className=\"lead\">This is a modified jumbotron that occupies the entire horizontal space of its parent.</p>\n                </Container>\n            </Jumbotron>\n        </div>\n    );\n};\n\nexport default OnLoadPage;","import React from 'react';\n// import { Nav, NavItem, NavLink, Button, ButtonGroup, Container, Row, Col, Media, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\n\n\nfunction Login(props){\n    const clickEventHandler = (e) => {\n        props.handlePageChange('LoggedIn')\n    }\n\n\n    return (\n        <div>\n            <h2>Login</h2>\n            <form onSubmit = {Login}>\n                <div className=\"flex-row space-between\">\n                    <label htmlFor=\"email\">Email address:</label>\n                    <input\n                    placeholder=\"youremail@gmail.com\"\n                    name=\"email\"\n                    type = \"email\"\n                    id = \"email\"\n\n                    />\n\n                </div>\n                <div className=\"flex-row space-between\">\n                    <label htmlFor=\"pwd\">Password:</label>\n                    <input\n                    placeholder=\"**********\"\n                    name = \"password\"\n                    type = \"password\"\n                    id = \"pwd\"\n\n                    />\n                </div>\n                {/*{error ? (*/}\n\n                {/*    <div>*/}\n                {/*        <p>Either the email or password are incoorrect.</p>*/}\n                {/*    </div>*/}\n                {/*) : null}*/}\n                <div>\n                <button type = \"submit\">Submit</button>\n              </div>\n            </form>\n        </div>\n    )\n}\n\nexport default Login\n","import React, {useState} from 'react';\n\n\n\n\n\n        function Signup(props) {\n\n                const [formState, setFormState] = useState ({email: '', password: ''});\n\n        async function signUpFormHandler (e) {\n                e.preventDefault();\n                try {\n                const create_username = document.querySelector('input[name= \"username\"]').value;\n                const create_password = document.querySelector('input[name= \"password\"]').value;\n                const create_user_email = document.querySelector('input[name= \"email\"]').value;\n\n\n\n                console.log(create_username,create_password,create_user_email);\n                const response = await fetch('/api/user', {\n                        method: 'POST',\n                        body: JSON.stringify({\n                                username: create_username,\n                              password:  create_password,\n                              email:  create_user_email\n                        }),\n                        headers: {\n                                'Content-Type': 'application/json'\n                        }\n\n                })\n        const serverResponse = await response.json()\n                            if(serverResponse.message) {\n                                    throw new Error(serverResponse);\n                            }\n                            console.log(serverResponse)\n\n\n                    }catch (err){\n                        console.log(err)\n                    }\n        }\n\nreturn(\n            <div>\n        <h2>Signup</h2>\n                    <form onSubmit = {signUpFormHandler}>\n                            <div>\n                                    <label htmlFor=\"username\">Username:</label>\n                                    <input\n                                    placeholder=\"Username\"\n                                    name = \"username\"\n                                    type = \"username\"\n                                    id = \"username\"\n\n                                    />\n                            </div>\n                            <div>\n                                    <label htmlFor=\"email\">Email:</label>\n                                    <input\n                                    placeholder=\"youremail@hotmail.com\"\n                                    name = \"email\"\n                                    type = \"email\"\n                                    id = \"email\"\n\n                                    />\n                            </div>\n                            <div>\n                                    <label htmlFor=\"pwd\">Password:</label>\n                                    <input\n                                    placeholder= \"*******\"\n                                    name = \"password\"\n                                    type = \"password\"\n                                    id = \"password\"\n\n                                    />\n                            </div>\n                            <div>\n                                    <button type = \"submit\">Submit</button>\n                            </div>\n                    </form>\n            </div>\n\n)\n}\n\n\n\n\n        export default Signup;","import React, {useState} from 'react';\n//import {BrowserRouter as Router, Route, Switch} from 'react-route-dom';\nimport './App.css';\nimport Recipes from './components/pages/ViewBlogPage'\nimport Navigation from './components/nav';\nimport OnLoadPage from './components/pages/OnLoadPage';\nimport Login from './components/pages/Login';\nimport Home from './components/pages/Home';\nimport Signup from './components/pages/Signup'\n\nfunction App() {\nconst [currentPage, handlePageChange] = useState('Home')\n\n\n  const renderPage = () => {\n    switch (currentPage) {\n      case 'Signup':\n        return <Signup />;\n\n      case 'Navigation':\n        return <Navigation/>;\n\n        case 'Recipes':\n          return  <Recipes />;\n\n        case 'Login':\n          return  <Login />;\n\n          default:\n\n            return<OnLoadPage currentPage={currentPage} handlePageChange={handlePageChange}/> ;\n    }\n  }\n\n\n  return (\n    <div>\n\n      <header className = \"navigation\">\n        <Navigation currentPage={currentPage} handlePageChange = {handlePageChange} />\n      </header>\n        <div> {renderPage(currentPage)}</div>\n\n    </div>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}